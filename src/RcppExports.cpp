// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// findMatchingSeedsCpp
IntegerVector findMatchingSeedsCpp(IntegerVector candidates, SEXP targetState, bool verbose, int progressEvery);
RcppExport SEXP _opdisDownsampling_findMatchingSeedsCpp(SEXP candidatesSEXP, SEXP targetStateSEXP, SEXP verboseSEXP, SEXP progressEverySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< IntegerVector >::type candidates(candidatesSEXP);
    Rcpp::traits::input_parameter< SEXP >::type targetState(targetStateSEXP);
    Rcpp::traits::input_parameter< bool >::type verbose(verboseSEXP);
    Rcpp::traits::input_parameter< int >::type progressEvery(progressEverySEXP);
    rcpp_result_gen = Rcpp::wrap(findMatchingSeedsCpp(candidates, targetState, verbose, progressEvery));
    return rcpp_result_gen;
END_RCPP
}
// findMatchingSeedsBatchCpp
IntegerVector findMatchingSeedsBatchCpp(IntegerVector candidates, SEXP targetState, int batchSize, bool verbose);
RcppExport SEXP _opdisDownsampling_findMatchingSeedsBatchCpp(SEXP candidatesSEXP, SEXP targetStateSEXP, SEXP batchSizeSEXP, SEXP verboseSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< IntegerVector >::type candidates(candidatesSEXP);
    Rcpp::traits::input_parameter< SEXP >::type targetState(targetStateSEXP);
    Rcpp::traits::input_parameter< int >::type batchSize(batchSizeSEXP);
    Rcpp::traits::input_parameter< bool >::type verbose(verboseSEXP);
    rcpp_result_gen = Rcpp::wrap(findMatchingSeedsBatchCpp(candidates, targetState, batchSize, verbose));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_opdisDownsampling_findMatchingSeedsCpp", (DL_FUNC) &_opdisDownsampling_findMatchingSeedsCpp, 4},
    {"_opdisDownsampling_findMatchingSeedsBatchCpp", (DL_FUNC) &_opdisDownsampling_findMatchingSeedsBatchCpp, 4},
    {NULL, NULL, 0}
};

RcppExport void R_init_opdisDownsampling(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
